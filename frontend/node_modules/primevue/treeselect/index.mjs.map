{"version":3,"file":"index.mjs","sources":["../../src/treeselect/BaseTreeSelect.vue","../../src/treeselect/TreeSelect.vue","../../src/treeselect/TreeSelect.vue?vue&type=template&id=9b4e9e54&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeSelectStyle from 'primevue/treeselect/style';\n\nexport default {\n    name: 'BaseTreeSelect',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        options: Array,\n        scrollHeight: {\n            type: String,\n            default: '20rem'\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: 'single'\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        display: {\n            type: String,\n            default: 'comma'\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        fluid: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputProps: {\n            type: null,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelProps: {\n            type: null,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: TreeSelectStyle,\n    provide() {\n        return {\n            $pcTreeSelect: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                role=\"combobox\"\n                :class=\"inputClass\"\n                :style=\"inputStyle\"\n                readonly\n                :disabled=\"disabled\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                :aria-labelledby=\"ariaLabelledby\"\n                :aria-label=\"ariaLabel\"\n                aria-haspopup=\"tree\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"listId\"\n                @focus=\"onFocus($event)\"\n                @blur=\"onBlur($event)\"\n                @keydown=\"onKeyDown($event)\"\n                v-bind=\"{ ...inputProps, ...ptm('hiddenInput') }\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"selectedNodes\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <div v-for=\"node of selectedNodes\" :key=\"node.key\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                            <Chip :class=\"cx('pcChip')\" :label=\"node.label\" :unstyled=\"unstyled\" :pt=\"ptm('pcChip')\" />\n                        </div>\n                        <template v-if=\"emptyValue\">{{ placeholder || 'empty' }}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <div :class=\"cx('dropdown')\" role=\"button\" aria-haspopup=\"tree\" :aria-expanded=\"overlayVisible\" v-bind=\"ptm('dropdown')\">\n            <!-- TODO: triggericon is deprecated since v4.0 -->\n            <slot :name=\"$slots.dropdownicon ? 'dropdownicon' : 'triggericon'\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"'ChevronDownIcon'\" :class=\"cx('dropdownIcon')\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" @click=\"onOverlayClick\" :class=\"[cx('panel'), panelClass]\" @keydown=\"onOverlayKeydown\" v-bind=\"{ ...panelProps, ...ptm('panel') }\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"options\"></slot>\n                    <div :class=\"cx('treeContainer')\" :style=\"{ 'max-height': scrollHeight }\" v-bind=\"ptm('treeContainer')\">\n                        <TSTree\n                            ref=\"tree\"\n                            :id=\"listId\"\n                            :value=\"options\"\n                            :selectionMode=\"selectionMode\"\n                            @update:selectionKeys=\"onSelectionChange\"\n                            :selectionKeys=\"modelValue\"\n                            :expandedKeys=\"expandedKeys\"\n                            @update:expandedKeys=\"onNodeToggle\"\n                            :metaKeySelection=\"metaKeySelection\"\n                            @node-expand=\"$emit('node-expand', $event)\"\n                            @node-collapse=\"$emit('node-collapse', $event)\"\n                            @node-select=\"onNodeSelect\"\n                            @node-unselect=\"onNodeUnselect\"\n                            :level=\"0\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"ptm('pcTree')\"\n                        >\n                            <template v-if=\"$slots.itemtoggleicon\" #toggleicon=\"iconProps\">\n                                <slot name=\"itemtoggleicon\" :node=\"iconProps.node\" :expanded=\"iconProps.expanded\" :class=\"iconProps.class\" />\n                            </template>\n                            <!--TODO: itemtogglericon deprecated since v4.0-->\n                            <template v-else-if=\"$slots.itemtogglericon\" #togglericon=\"iconProps\">\n                                <slot name=\"itemtogglericon\" :node=\"iconProps.node\" :expanded=\"iconProps.expanded\" :class=\"iconProps.class\" />\n                            </template>\n                            <template v-if=\"$slots.itemcheckboxicon\" #checkboxicon=\"iconProps\">\n                                <slot name=\"itemcheckboxicon\" :checked=\"iconProps.checked\" :partialChecked=\"iconProps.partialChecked\" :class=\"iconProps.class\" />\n                            </template>\n                        </TSTree>\n                        <div v-if=\"emptyOptions\" :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </div>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"options\"></slot>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport { focus, getFirstFocusableElement, getLastFocusableElement, find, findSingle, getFocusableElements, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport Chip from 'primevue/chip';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport BaseTreeSelect from './BaseTreeSelect.vue';\n\nexport default {\n    name: 'TreeSelect',\n    extends: BaseTreeSelect,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            focused: false,\n            overlayVisible: false,\n            expandedKeys: {}\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        modelValue: {\n            handler: function () {\n                if (!this.selfChange) {\n                    this.updateTreeState();\n                }\n\n                this.selfChange = false;\n            },\n            immediate: true\n        },\n        options() {\n            this.updateTreeState();\n        }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    selfChange: false,\n    selfClick: false,\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.updateTreeState();\n    },\n    methods: {\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n            this.$refs.focusInput.focus();\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.$emit('blur', event);\n        },\n        onClick(event) {\n            if (this.disabled) {\n                return;\n            }\n\n            if (!this.disabled && (!this.overlay || !this.overlay.contains(event.target))) {\n                if (this.overlayVisible) this.hide();\n                else this.show();\n\n                focus(this.$refs.focusInput);\n            }\n        },\n        onSelectionChange(keys) {\n            this.selfChange = true;\n            this.$emit('update:modelValue', keys);\n            this.$emit('change', keys);\n        },\n        onNodeSelect(node) {\n            this.$emit('node-select', node);\n\n            if (this.selectionMode === 'single') {\n                this.hide();\n            }\n        },\n        onNodeUnselect(node) {\n            this.$emit('node-unselect', node);\n        },\n        onNodeToggle(keys) {\n            this.expandedKeys = keys;\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'Space':\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (this.overlayVisible) return;\n\n            this.show();\n\n            this.$nextTick(() => {\n                const treeNodeEl = find(this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n                const focusedElement = [...treeNodeEl].find((item) => item.getAttribute('tabindex') === '0');\n\n                focus(focusedElement);\n            });\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n            } else {\n                this.onArrowDownKey(event);\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n                event.preventDefault();\n            }\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                }\n            }\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.focus();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n            this.scrollValueInView();\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        focus() {\n            let focusableElements = getFocusableElements(this.overlay);\n\n            if (focusableElements && focusableElements.length > 0) {\n                focusableElements[0].focus();\n            }\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && !this.selfClick && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n\n                    this.selfClick = false;\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n\n            this.selfClick = true;\n        },\n        onOverlayKeydown(event) {\n            if (event.code === 'Escape') this.hide();\n        },\n        findSelectedNodes(node, keys, selectedNodes) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    selectedNodes.push(node);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        this.findSelectedNodes(childNode, keys, selectedNodes);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\n                }\n            }\n        },\n        isSelected(node, keys) {\n            return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n        },\n        updateTreeState() {\n            let keys = { ...this.modelValue };\n\n            this.expandedKeys = {};\n\n            if (keys && this.options) {\n                this.updateTreeBranchState(null, null, keys);\n            }\n        },\n        updateTreeBranchState(node, path, keys) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    this.expandPath(path);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        path.push(node.key);\n                        this.updateTreeBranchState(childNode, path, keys);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.updateTreeBranchState(childNode, [], keys);\n                }\n            }\n        },\n        expandPath(path) {\n            if (path.length > 0) {\n                for (let key of path) {\n                    this.expandedKeys[key] = true;\n                }\n            }\n        },\n        scrollValueInView() {\n            if (this.overlay) {\n                let selectedItem = findSingle(this.overlay, '[data-p-selected=\"true\"]');\n\n                if (selectedItem) {\n                    selectedItem.scrollIntoView({ block: 'nearest', inline: 'start' });\n                }\n            }\n        }\n    },\n    computed: {\n        selectedNodes() {\n            let selectedNodes = [];\n\n            if (this.modelValue && this.options) {\n                let keys = { ...this.modelValue };\n\n                this.findSelectedNodes(null, keys, selectedNodes);\n            }\n\n            return selectedNodes;\n        },\n        label() {\n            let value = this.selectedNodes;\n\n            return value.length ? value.map((node) => node.label).join(', ') : this.placeholder;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        emptyValue() {\n            return !this.modelValue || Object.keys(this.modelValue).length === 0;\n        },\n        emptyOptions() {\n            return !this.options || this.options.length === 0;\n        },\n        listId() {\n            return this.id + '_list';\n        }\n    },\n    components: {\n        TSTree: Tree,\n        Chip,\n        Portal: Portal,\n        ChevronDownIcon: ChevronDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                role=\"combobox\"\n                :class=\"inputClass\"\n                :style=\"inputStyle\"\n                readonly\n                :disabled=\"disabled\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                :aria-labelledby=\"ariaLabelledby\"\n                :aria-label=\"ariaLabel\"\n                aria-haspopup=\"tree\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"listId\"\n                @focus=\"onFocus($event)\"\n                @blur=\"onBlur($event)\"\n                @keydown=\"onKeyDown($event)\"\n                v-bind=\"{ ...inputProps, ...ptm('hiddenInput') }\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"selectedNodes\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <div v-for=\"node of selectedNodes\" :key=\"node.key\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                            <Chip :class=\"cx('pcChip')\" :label=\"node.label\" :unstyled=\"unstyled\" :pt=\"ptm('pcChip')\" />\n                        </div>\n                        <template v-if=\"emptyValue\">{{ placeholder || 'empty' }}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <div :class=\"cx('dropdown')\" role=\"button\" aria-haspopup=\"tree\" :aria-expanded=\"overlayVisible\" v-bind=\"ptm('dropdown')\">\n            <!-- TODO: triggericon is deprecated since v4.0 -->\n            <slot :name=\"$slots.dropdownicon ? 'dropdownicon' : 'triggericon'\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"'ChevronDownIcon'\" :class=\"cx('dropdownIcon')\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" @click=\"onOverlayClick\" :class=\"[cx('panel'), panelClass]\" @keydown=\"onOverlayKeydown\" v-bind=\"{ ...panelProps, ...ptm('panel') }\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"options\"></slot>\n                    <div :class=\"cx('treeContainer')\" :style=\"{ 'max-height': scrollHeight }\" v-bind=\"ptm('treeContainer')\">\n                        <TSTree\n                            ref=\"tree\"\n                            :id=\"listId\"\n                            :value=\"options\"\n                            :selectionMode=\"selectionMode\"\n                            @update:selectionKeys=\"onSelectionChange\"\n                            :selectionKeys=\"modelValue\"\n                            :expandedKeys=\"expandedKeys\"\n                            @update:expandedKeys=\"onNodeToggle\"\n                            :metaKeySelection=\"metaKeySelection\"\n                            @node-expand=\"$emit('node-expand', $event)\"\n                            @node-collapse=\"$emit('node-collapse', $event)\"\n                            @node-select=\"onNodeSelect\"\n                            @node-unselect=\"onNodeUnselect\"\n                            :level=\"0\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"ptm('pcTree')\"\n                        >\n                            <template v-if=\"$slots.itemtoggleicon\" #toggleicon=\"iconProps\">\n                                <slot name=\"itemtoggleicon\" :node=\"iconProps.node\" :expanded=\"iconProps.expanded\" :class=\"iconProps.class\" />\n                            </template>\n                            <!--TODO: itemtogglericon deprecated since v4.0-->\n                            <template v-else-if=\"$slots.itemtogglericon\" #togglericon=\"iconProps\">\n                                <slot name=\"itemtogglericon\" :node=\"iconProps.node\" :expanded=\"iconProps.expanded\" :class=\"iconProps.class\" />\n                            </template>\n                            <template v-if=\"$slots.itemcheckboxicon\" #checkboxicon=\"iconProps\">\n                                <slot name=\"itemcheckboxicon\" :checked=\"iconProps.checked\" :partialChecked=\"iconProps.partialChecked\" :class=\"iconProps.class\" />\n                            </template>\n                        </TSTree>\n                        <div v-if=\"emptyOptions\" :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </div>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"options\"></slot>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport { focus, getFirstFocusableElement, getLastFocusableElement, find, findSingle, getFocusableElements, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport Chip from 'primevue/chip';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport BaseTreeSelect from './BaseTreeSelect.vue';\n\nexport default {\n    name: 'TreeSelect',\n    extends: BaseTreeSelect,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            focused: false,\n            overlayVisible: false,\n            expandedKeys: {}\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        modelValue: {\n            handler: function () {\n                if (!this.selfChange) {\n                    this.updateTreeState();\n                }\n\n                this.selfChange = false;\n            },\n            immediate: true\n        },\n        options() {\n            this.updateTreeState();\n        }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    selfChange: false,\n    selfClick: false,\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.updateTreeState();\n    },\n    methods: {\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n            this.$refs.focusInput.focus();\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.$emit('blur', event);\n        },\n        onClick(event) {\n            if (this.disabled) {\n                return;\n            }\n\n            if (!this.disabled && (!this.overlay || !this.overlay.contains(event.target))) {\n                if (this.overlayVisible) this.hide();\n                else this.show();\n\n                focus(this.$refs.focusInput);\n            }\n        },\n        onSelectionChange(keys) {\n            this.selfChange = true;\n            this.$emit('update:modelValue', keys);\n            this.$emit('change', keys);\n        },\n        onNodeSelect(node) {\n            this.$emit('node-select', node);\n\n            if (this.selectionMode === 'single') {\n                this.hide();\n            }\n        },\n        onNodeUnselect(node) {\n            this.$emit('node-unselect', node);\n        },\n        onNodeToggle(keys) {\n            this.expandedKeys = keys;\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'Space':\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (this.overlayVisible) return;\n\n            this.show();\n\n            this.$nextTick(() => {\n                const treeNodeEl = find(this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n                const focusedElement = [...treeNodeEl].find((item) => item.getAttribute('tabindex') === '0');\n\n                focus(focusedElement);\n            });\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n            } else {\n                this.onArrowDownKey(event);\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            if (this.overlayVisible) {\n                this.hide();\n                event.preventDefault();\n            }\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                }\n            }\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.focus();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n            this.scrollValueInView();\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        focus() {\n            let focusableElements = getFocusableElements(this.overlay);\n\n            if (focusableElements && focusableElements.length > 0) {\n                focusableElements[0].focus();\n            }\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && !this.selfClick && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n\n                    this.selfClick = false;\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n\n            this.selfClick = true;\n        },\n        onOverlayKeydown(event) {\n            if (event.code === 'Escape') this.hide();\n        },\n        findSelectedNodes(node, keys, selectedNodes) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    selectedNodes.push(node);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        this.findSelectedNodes(childNode, keys, selectedNodes);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\n                }\n            }\n        },\n        isSelected(node, keys) {\n            return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n        },\n        updateTreeState() {\n            let keys = { ...this.modelValue };\n\n            this.expandedKeys = {};\n\n            if (keys && this.options) {\n                this.updateTreeBranchState(null, null, keys);\n            }\n        },\n        updateTreeBranchState(node, path, keys) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    this.expandPath(path);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        path.push(node.key);\n                        this.updateTreeBranchState(childNode, path, keys);\n                    }\n                }\n            } else {\n                for (let childNode of this.options) {\n                    this.updateTreeBranchState(childNode, [], keys);\n                }\n            }\n        },\n        expandPath(path) {\n            if (path.length > 0) {\n                for (let key of path) {\n                    this.expandedKeys[key] = true;\n                }\n            }\n        },\n        scrollValueInView() {\n            if (this.overlay) {\n                let selectedItem = findSingle(this.overlay, '[data-p-selected=\"true\"]');\n\n                if (selectedItem) {\n                    selectedItem.scrollIntoView({ block: 'nearest', inline: 'start' });\n                }\n            }\n        }\n    },\n    computed: {\n        selectedNodes() {\n            let selectedNodes = [];\n\n            if (this.modelValue && this.options) {\n                let keys = { ...this.modelValue };\n\n                this.findSelectedNodes(null, keys, selectedNodes);\n            }\n\n            return selectedNodes;\n        },\n        label() {\n            let value = this.selectedNodes;\n\n            return value.length ? value.map((node) => node.label).join(', ') : this.placeholder;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        emptyValue() {\n            return !this.modelValue || Object.keys(this.modelValue).length === 0;\n        },\n        emptyOptions() {\n            return !this.options || this.options.length === 0;\n        },\n        listId() {\n            return this.id + '_list';\n        }\n    },\n    components: {\n        TSTree: Tree,\n        Chip,\n        Portal: Portal,\n        ChevronDownIcon: ChevronDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","modelValue","options","Array","scrollHeight","type","String","placeholder","invalid","Boolean","variant","disabled","tabindex","Number","selectionMode","appendTo","Object","emptyMessage","display","metaKeySelection","fluid","inputId","inputClass","inputStyle","inputProps","panelClass","panelProps","ariaLabelledby","ariaLabel","style","TreeSelectStyle","provide","$pcTreeSelect","$parentInstance","BaseTreeSelect","inheritAttrs","emits","data","id","$attrs","focused","overlayVisible","expandedKeys","watch","$attrsId","newValue","UniqueComponentId","handler","selfChange","updateTreeState","immediate","outsideClickListener","resizeListener","scrollHandler","overlay","selfClick","beforeUnmount","unbindOutsideClickListener","unbindResizeListener","destroy","ZIndex","clear","mounted","methods","show","$emit","hide","$refs","focusInput","focus","onFocus","event","onBlur","onClick","contains","target","onSelectionChange","keys","onNodeSelect","node","onNodeUnselect","onNodeToggle","onFirstHiddenFocus","focusableEl","relatedTarget","getFirstFocusableElement","onLastHiddenFocus","getLastFocusableElement","onKeyDown","code","onArrowDownKey","onEnterKey","onEscapeKey","onTabKey","_this","$nextTick","treeNodeEl","find","tree","$el","focusedElement","_toConsumableArray","item","getAttribute","preventDefault","pressedInInputText","hasFocusableElements","firstHiddenFocusableElementOnOverlay","getFocusableElements","length","onOverlayEnter","el","set","$primevue","config","zIndex","addStyle","position","top","left","alignOverlay","onOverlayAfterEnter","bindOutsideClickListener","bindScrollListener","bindResizeListener","scrollValueInView","onOverlayLeave","unbindScrollListener","onOverlayAfterLeave","focusableElements","relativePosition","minWidth","getOuterWidth","absolutePosition","_this2","isOutsideClicked","document","addEventListener","removeEventListener","_this3","ConnectedOverlayScrollHandler","container","_this4","isTouchDevice","window","isSameNode","overlayRef","onOverlayClick","OverlayEventBus","emit","originalEvent","onOverlayKeydown","findSelectedNodes","selectedNodes","isSelected","push","key","children","_iterator","_createForOfIteratorHelper","_step","s","n","done","childNode","value","err","e","f","_iterator2","_step2","checked","_objectSpread","updateTreeBranchState","path","expandPath","_iterator3","_step3","_iterator4","_step4","_iterator5","_step5","selectedItem","findSingle","scrollIntoView","block","inline","computed","label","map","join","emptyMessageText","locale","emptyValue","emptyOptions","listId","components","TSTree","Tree","Chip","Portal","ChevronDownIcon","directives","ripple","Ripple","_openBlock","_createElementBlock","_mergeProps","ref","_ctx","cx","sx","$options","apply","arguments","ptmi","_createElementVNode","ptm","role","readonly","$data","_cache","$event","onKeydown","_hoisted_1","_renderSlot","$slots","_Fragment","_renderList","_createVNode","_component_Chip","unstyled","pt","dropdownicon","_createBlock","_resolveDynamicComponent","_component_Portal","_Transition","onEnter","onAfterEnter","onLeave","onAfterLeave","_component_TSTree","selectionKeys","onNodeExpand","onNodeCollapse","level","itemtoggleicon","fn","_withCtx","iconProps","expanded","_normalizeClass","itemtogglericon","itemcheckboxicon","partialChecked"],"mappings":"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"}