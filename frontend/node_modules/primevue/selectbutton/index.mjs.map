{"version":3,"file":"index.mjs","sources":["../../src/selectbutton/BaseSelectButton.vue","../../src/selectbutton/SelectButton.vue","../../src/selectbutton/SelectButton.vue?vue&type=template&id=42427211&lang.js"],"sourcesContent":["<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport SelectButtonStyle from 'primevue/selectbutton/style';\n\nexport default {\n    name: 'BaseSelectButton',\n    extends: BaseEditableHolder,\n    props: {\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        multiple: Boolean,\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        dataKey: null,\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    style: SelectButtonStyle,\n    provide() {\n        return {\n            $pcSelectButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" role=\"group\" :aria-labelledby=\"ariaLabelledby\" v-bind=\"ptmi('root')\">\n        <template v-for=\"(option, index) of options\" :key=\"getOptionRenderKey(option)\">\n            <ToggleButton\n                :modelValue=\"isSelected(option)\"\n                :onLabel=\"getOptionLabel(option)\"\n                :offLabel=\"getOptionLabel(option)\"\n                :disabled=\"disabled || isOptionDisabled(option)\"\n                :unstyled=\"unstyled\"\n                :size=\"size\"\n                @change=\"onOptionSelect($event, option, index)\"\n                :pt=\"ptm('pcToggleButton')\"\n            >\n                <template v-if=\"$slots.option\" #default>\n                    <slot name=\"option\" :option=\"option\" :index=\"index\">\n                        <span v-bind=\"ptm('pcToggleButton')['label']\">{{ getOptionLabel(option) }}</span>\n                    </slot>\n                </template>\n            </ToggleButton>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseSelectButton from './BaseSelectButton.vue';\n\nexport default {\n    name: 'SelectButton',\n    extends: BaseSelectButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        onOptionSelect(event, option, index) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n\n            if (selected && !this.allowEmpty) {\n                return;\n            }\n\n            let optionValue = this.getOptionValue(option);\n            let newValue;\n\n            if (this.multiple) {\n                if (selected) newValue = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n                else newValue = this.d_value ? [...this.d_value, optionValue] : [optionValue];\n            } else {\n                newValue = selected ? null : optionValue;\n            }\n\n            this.writeValue(newValue, event);\n            this.$emit('change', { event: event, value: newValue });\n        },\n        isSelected(option) {\n            let selected = false;\n            let optionValue = this.getOptionValue(option);\n\n            if (this.multiple) {\n                if (this.d_value) {\n                    for (let val of this.d_value) {\n                        if (equals(val, optionValue, this.equalityKey)) {\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                selected = equals(this.d_value, optionValue, this.equalityKey);\n            }\n\n            return selected;\n        }\n    },\n    computed: {\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ToggleButton\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" role=\"group\" :aria-labelledby=\"ariaLabelledby\" v-bind=\"ptmi('root')\">\n        <template v-for=\"(option, index) of options\" :key=\"getOptionRenderKey(option)\">\n            <ToggleButton\n                :modelValue=\"isSelected(option)\"\n                :onLabel=\"getOptionLabel(option)\"\n                :offLabel=\"getOptionLabel(option)\"\n                :disabled=\"disabled || isOptionDisabled(option)\"\n                :unstyled=\"unstyled\"\n                :size=\"size\"\n                @change=\"onOptionSelect($event, option, index)\"\n                :pt=\"ptm('pcToggleButton')\"\n            >\n                <template v-if=\"$slots.option\" #default>\n                    <slot name=\"option\" :option=\"option\" :index=\"index\">\n                        <span v-bind=\"ptm('pcToggleButton')['label']\">{{ getOptionLabel(option) }}</span>\n                    </slot>\n                </template>\n            </ToggleButton>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseSelectButton from './BaseSelectButton.vue';\n\nexport default {\n    name: 'SelectButton',\n    extends: BaseSelectButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        onOptionSelect(event, option, index) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n\n            if (selected && !this.allowEmpty) {\n                return;\n            }\n\n            let optionValue = this.getOptionValue(option);\n            let newValue;\n\n            if (this.multiple) {\n                if (selected) newValue = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n                else newValue = this.d_value ? [...this.d_value, optionValue] : [optionValue];\n            } else {\n                newValue = selected ? null : optionValue;\n            }\n\n            this.writeValue(newValue, event);\n            this.$emit('change', { event: event, value: newValue });\n        },\n        isSelected(option) {\n            let selected = false;\n            let optionValue = this.getOptionValue(option);\n\n            if (this.multiple) {\n                if (this.d_value) {\n                    for (let val of this.d_value) {\n                        if (equals(val, optionValue, this.equalityKey)) {\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                selected = equals(this.d_value, optionValue, this.equalityKey);\n            }\n\n            return selected;\n        }\n    },\n    computed: {\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ToggleButton\n    }\n};\n</script>\n"],"names":["name","BaseEditableHolder","props","options","Array","optionLabel","optionValue","optionDisabled","multiple","Boolean","allowEmpty","type","dataKey","ariaLabelledby","String","size","style","SelectButtonStyle","provide","$pcSelectButton","$parentInstance","BaseSelectButton","inheritAttrs","emits","methods","getOptionLabel","option","resolveFieldData","getOptionValue","getOptionRenderKey","isOptionDisabled","onOptionSelect","event","index","_this","disabled","selected","isSelected","newValue","d_value","filter","val","equals","equalityKey","concat","_toConsumableArray","writeValue","$emit","value","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","computed","directives","ripple","Ripple","components","ToggleButton","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","role","ptmi","_Fragment","_renderList","_createBlock","_component_ToggleButton","key","$options","modelValue","onLabel","offLabel","unstyled","onChange","$event","pt","ptm","$slots","_renderSlot","_createElementVNode","ref_for","_toDisplayString"],"mappings":"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"}