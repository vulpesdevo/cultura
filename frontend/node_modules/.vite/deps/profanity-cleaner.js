import {
  __commonJS
} from "./chunk-5FUTL2UF.js";

// node_modules/profanity-cleaner/dist/profanity-cleaner.js
var require_profanity_cleaner = __commonJS({
  "node_modules/profanity-cleaner/dist/profanity-cleaner.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.profanityCleaner = t() : e.profanityCleaner = t();
    }(exports, () => {
      return e = { 380: (e2, t2, r) => {
        function a(e3) {
          return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
            return typeof e4;
          } : function(e4) {
            return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
          }, a(e3);
        }
        function n(e3) {
          return function(e4) {
            if (Array.isArray(e4)) return o(e4);
          }(e3) || function(e4) {
            if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"]) return Array.from(e4);
          }(e3) || function(e4, t3) {
            if (e4) {
              if ("string" == typeof e4) return o(e4, t3);
              var r2 = Object.prototype.toString.call(e4).slice(8, -1);
              return "Object" === r2 && e4.constructor && (r2 = e4.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e4) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? o(e4, t3) : void 0;
            }
          }(e3) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }();
        }
        function o(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r2 = 0, a2 = new Array(t3); r2 < t3; r2++) a2[r2] = e3[r2];
          return a2;
        }
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var a2 = Object.getOwnPropertySymbols(e3);
            t3 && (a2 = a2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, a2);
          }
          return r2;
        }
        function i(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              c(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function c(e3, t3, r2) {
          return (t3 = function(e4) {
            var t4 = function(e5, t5) {
              if ("object" !== a(e5) || null === e5) return e5;
              var r3 = e5[Symbol.toPrimitive];
              if (void 0 !== r3) {
                var n2 = r3.call(e5, "string");
                if ("object" !== a(n2)) return n2;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(e5);
            }(e4);
            return "symbol" === a(t4) ? t4 : String(t4);
          }(t3)) in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        var u = r(554);
        function k(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = { placeholder: "*", caseSensitive: false, wholeWordsOnly: true, exceptions: [], keepFirstAndLastChar: false, customReplacement: null, replacePartialWords: false, includePunctuation: false, minimumWordLength: 1, customMatch: null, customBadWords: [] }, a2 = i(i({}, r2), t3), o2 = [].concat(n(u), n(a2.customBadWords)).map(function(e4) {
            return e4.replace(/\*/g, "\\w+");
          }), s2 = new RegExp(o2.join("|"), "g");
          return a2.caseSensitive || (s2 = new RegExp(o2.join("|"), "gi")), a2.wholeWordsOnly && (s2 = new RegExp("\\b(".concat(o2.join("|"), ")\\b"), "gi")), a2.replacePartialWords && (s2 = new RegExp(o2.join("|"), "gi")), e3.replace(s2, function(e4) {
            if (e4.length < a2.minimumWordLength) return e4;
            if ("function" == typeof a2.customMatch && !a2.customMatch(e4)) return e4;
            if (a2.exceptions.includes(e4.toLowerCase())) return e4;
            if ("function" == typeof a2.customReplacement) return a2.customReplacement(e4);
            if (a2.keepFirstAndLastChar) return "".concat(e4[0]).concat(a2.placeholder.repeat(e4.length - 2)).concat(e4[e4.length - 1]);
            var t4 = a2.placeholder.repeat(e4.length);
            if (a2.includePunctuation) {
              var r3 = e4[0], n2 = e4[e4.length - 1];
              r3.match(/[^\w\s]/) && (t4 = "".concat(r3).concat(t4.substring(1))), n2.match(/[^\w\s]/) && (t4 = "".concat(t4.substring(0, t4.length - 1)).concat(n2));
            }
            return t4;
          });
        }
        e2.exports = { clean: k, isProfane: function(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = k(e3, t3);
          return r2 !== e3;
        } };
      }, 554: (e2) => {
        "use strict";
        e2.exports = JSON.parse('["ahole","anus","ash0le","ash0les","asholes","ass","Ass Monkey","Assface","assh0le","assh0lez","asshole","assholes","assholz","asswipe","azzhole","bassterds","bastard","bastards","bastardz","basterds","basterdz","Biatch","bitch","bitches","Blow Job","boffing","butthole","buttwipe","c0ck","c0cks","c0k","Carpet Muncher","cawk","cawks","Clit","cnts","cntz","cock","cockhead","cock-head","cocks","CockSucker","cock-sucker","crap","cum","cunt","cunts","cuntz","dick","dild0","dild0s","dildo","dildos","dilld0","dilld0s","dominatricks","dominatrics","dominatrix","dyke","enema","f u c k","f u c k e r","fag","fag1t","faget","fagg1t","faggit","faggot","fagg0t","fagit","fags","fagz","faig","faigs","fart","flipping the bird","fuck","fucker","fuckin","fucking","fucks","Fudge Packer","fuk","Fukah","Fuken","fuker","Fukin","Fukk","Fukkah","Fukken","Fukker","Fukkin","g00k","God-damned","h00r","h0ar","h0re","hells","hoar","hoor","hoore","jackoff","jap","japs","jerk-off","jisim","jiss","jizm","jizz","knob","knobs","knobz","kunt","kunts","kuntz","Lezzian","Lipshits","Lipshitz","masochist","masokist","massterbait","masstrbait","masstrbate","masterbaiter","masterbate","masterbates","Motha Fucker","Motha Fuker","Motha Fukkah","Motha Fukker","Mother Fucker","Mother Fukah","Mother Fuker","Mother Fukkah","Mother Fukker","mother-fucker","Mutha Fucker","Mutha Fukah","Mutha Fuker","Mutha Fukkah","Mutha Fukker","n1gr","nastt","nigger;","nigur;","niiger;","niigr;","orafis","orgasim;","orgasm","orgasum","oriface","orifice","orifiss","packi","packie","packy","paki","pakie","paky","pecker","peeenus","peeenusss","peenus","peinus","pen1s","penas","penis","penis-breath","penus","penuus","Phuc","Phuck","Phuk","Phuker","Phukker","polac","polack","polak","Poonani","pr1c","pr1ck","pr1k","pusse","pussee","pussy","puuke","puuker","qweir","recktum","rectum","retard","sadist","scank","schlong","screwing","semen","sex","sexy","Sh!t","sh1t","sh1ter","sh1ts","sh1tter","sh1tz","shit","shits","shitter","Shitty","Shity","shitz","Shyt","Shyte","Shytty","Shyty","skanck","skank","skankee","skankey","skanks","Skanky","slag","slut","sluts","Slutty","slutz","son-of-a-bitch","tit","turd","va1jina","vag1na","vagiina","vagina","vaj1na","vajina","vullva","vulva","w0p","wh00r","wh0re","whore","xrated","xxx","b!+ch","bitch","blowjob","clit","arschloch","fuck","shit","ass","asshole","b!tch","b17ch","b1tch","bastard","bi+ch","boiolas","buceta","c0ck","cawk","chink","cipa","clits","cock","cum","cunt","dildo","dirsa","ejakulate","fatass","fcuk","fuk","fux0r","hoer","hore","jism","kawk","l3itch","l3i+ch","masturbate","masterbat*","masterbat3","motherfucker","s.o.b.","mofo","nazi","nigga","nigger","nutsack","phuck","pimpis","pusse","pussy","scrotum","sh!t","shemale","shi+","sh!+","slut","smut","teets","tits","boobs","b00bs","teez","testical","testicle","titt","w00se","jackoff","wank","whoar","whore","*damn","*dyke","*fuck*","*shit*","@$$","amcik","andskota","arse*","assrammer","ayir","bi7ch","bitch*","bollock*","breasts","butt-pirate","cabron","cazzo","chraa","chuj","Cock*","cunt*","d4mn","daygo","dego","dick*","dike*","dupa","dziwka","ejackulate","Ekrem*","Ekto","enculer","faen","fag*","fanculo","fanny","feces","feg","Felcher","ficken","fitt*","Flikker","foreskin","Fotze","Fu*","fuk*","futkretzn","gook","guiena","h0r","h4x0r","hell","helvete","hoer*","honkey","Huevon","hui","injun","jizz","kanker*","kike","klootzak","kraut","knulle","kuk","kuksuger","Kurac","kurwa","kusi*","kyrpa*","lesbo","mamhoon","masturbat*","merd*","mibun","monkleigh","mouliewop","muie","mulkku","muschi","nazis","nepesaurio","nigger*","orospu","paska*","perse","picka","pierdol*","pillu*","pimmel","piss*","pizda","poontsee","poop","porn","p0rn","pr0n","preteen","pula","pule","puta","puto","qahbeh","queef*","rautenberg","schaffer","scheiss*","schlampe","schmuck","screw","sh!t*","sharmuta","sharmute","shipal","shiz","skribz","skurwysyn","sphencter","spic","spierdalaj","splooge","suka","b00b*","testicle*","titt*","twat","vittu","wank*","wetback*","wichser","wop*","yed","zabourah"]');
      } }, t = {}, function r(a) {
        var n = t[a];
        if (void 0 !== n) return n.exports;
        var o = t[a] = { exports: {} };
        return e[a](o, o.exports, r), o.exports;
      }(380);
      var e, t;
    });
  }
});
export default require_profanity_cleaner();
//# sourceMappingURL=profanity-cleaner.js.map
