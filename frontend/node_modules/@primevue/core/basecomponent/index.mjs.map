{"version":3,"file":"index.mjs","sources":["../../src/basecomponent/style/BaseComponentStyle.js","../../src/basecomponent/BaseComponent.vue"],"sourcesContent":["import BaseStyle from '@primevue/core/base/style';\n\nexport default BaseStyle.extend({\n    name: 'common'\n});\n","<script>\nimport { Theme, ThemeService } from '@primeuix/styled';\nimport { findSingle, isClient } from '@primeuix/utils/dom';\nimport { getKeyValue, isArray, isFunction, isNotEmpty, isString, resolve, toFlatCase } from '@primeuix/utils/object';\nimport { uuid } from '@primeuix/utils/uuid';\nimport Base from '@primevue/core/base';\nimport BaseStyle from '@primevue/core/base/style';\nimport { mergeProps } from 'vue';\nimport BaseComponentStyle from './style/BaseComponentStyle';\n\nexport default {\n    name: 'BaseComponent',\n    props: {\n        pt: {\n            type: Object,\n            default: undefined\n        },\n        ptOptions: {\n            type: Object,\n            default: undefined\n        },\n        unstyled: {\n            type: Boolean,\n            default: undefined\n        },\n        dt: {\n            type: Object,\n            default: undefined\n        }\n    },\n    inject: {\n        $parentInstance: {\n            default: undefined\n        }\n    },\n    watch: {\n        isUnstyled: {\n            immediate: true,\n            handler(newValue) {\n                if (!newValue) {\n                    this._loadCoreStyles();\n                    this._themeChangeListener(this._loadCoreStyles); // update styles with theme settings\n                }\n            }\n        },\n        dt: {\n            immediate: true,\n            handler(newValue) {\n                if (newValue) {\n                    this._loadScopedThemeStyles(newValue);\n                    this._themeChangeListener(() => this._loadScopedThemeStyles(newValue));\n                } else {\n                    this._unloadScopedThemeStyles();\n                }\n            }\n        }\n    },\n    scopedStyleEl: undefined,\n    rootEl: undefined,\n    $attrSelector: undefined,\n    beforeCreate() {\n        const _usept = this.pt?.['_usept'];\n        const originalValue = _usept ? this.pt?.originalValue?.[this.$.type.name] : undefined;\n        const value = _usept ? this.pt?.value?.[this.$.type.name] : this.pt;\n\n        (value || originalValue)?.hooks?.['onBeforeCreate']?.();\n\n        const _useptInConfig = this.$primevueConfig?.pt?.['_usept'];\n        const originalValueInConfig = _useptInConfig ? this.$primevue?.config?.pt?.originalValue : undefined;\n        const valueInConfig = _useptInConfig ? this.$primevue?.config?.pt?.value : this.$primevue?.config?.pt;\n\n        (valueInConfig || originalValueInConfig)?.[this.$.type.name]?.hooks?.['onBeforeCreate']?.();\n        this.$attrSelector = uuid('pc');\n    },\n    created() {\n        this._hook('onCreated');\n    },\n    beforeMount() {\n        // @todo - improve performance\n        this.rootEl = findSingle(this.$el, `[data-pc-name=\"${toFlatCase(this.$.type.name)}\"]`);\n\n        if (this.rootEl) {\n            this.$attrSelector && !this.rootEl.hasAttribute(this.$attrSelector) && this.rootEl.setAttribute(this.$attrSelector, '');\n            this.rootEl.$pc = { name: this.$.type.name, attrSelector: this.$attrSelector, ...this.$params };\n        }\n\n        this._loadStyles();\n        this._hook('onBeforeMount');\n    },\n    mounted() {\n        this._hook('onMounted');\n    },\n    beforeUpdate() {\n        this._hook('onBeforeUpdate');\n    },\n    updated() {\n        this._hook('onUpdated');\n    },\n    beforeUnmount() {\n        this._hook('onBeforeUnmount');\n    },\n    unmounted() {\n        this._unloadScopedThemeStyles();\n        this._hook('onUnmounted');\n    },\n    methods: {\n        _hook(hookName) {\n            if (!this.$options.hostName) {\n                const selfHook = this._usePT(this._getPT(this.pt, this.$.type.name), this._getOptionValue, `hooks.${hookName}`);\n                const defaultHook = this._useDefaultPT(this._getOptionValue, `hooks.${hookName}`);\n\n                selfHook?.();\n                defaultHook?.();\n            }\n        },\n        _mergeProps(fn, ...args) {\n            return isFunction(fn) ? fn(...args) : mergeProps(...args);\n        },\n        _loadStyles() {\n            const _load = () => {\n                // @todo\n                if (!Base.isStyleNameLoaded('base')) {\n                    BaseStyle.loadCSS(this.$styleOptions);\n                    this._loadGlobalStyles();\n\n                    Base.setLoadedStyleName('base');\n                }\n\n                this._loadThemeStyles();\n            };\n\n            _load();\n            this._themeChangeListener(_load);\n        },\n        _loadCoreStyles() {\n            if (!Base.isStyleNameLoaded(this.$style?.name) && this.$style?.name) {\n                BaseComponentStyle.loadCSS(this.$styleOptions);\n                this.$options.style && this.$style.loadCSS(this.$styleOptions);\n\n                Base.setLoadedStyleName(this.$style.name);\n            }\n        },\n        _loadGlobalStyles() {\n            /*\n             * @todo Add self custom css support;\n             * <Panel :pt=\"{ css: `...` }\" .../>\n             *\n             * const selfCSS = this._getPTClassValue(this.pt, 'css', this.$params);\n             * const defaultCSS = this._getPTClassValue(this.defaultPT, 'css', this.$params);\n             * const mergedCSS = mergeProps(selfCSS, defaultCSS);\n             * isNotEmpty(mergedCSS?.class) && this.$css.loadCustomStyle(mergedCSS?.class);\n             */\n\n            const globalCSS = this._useGlobalPT(this._getOptionValue, 'global.css', this.$params);\n\n            isNotEmpty(globalCSS) && BaseStyle.load(globalCSS, { name: 'global', ...this.$styleOptions });\n        },\n        _loadThemeStyles() {\n            if (this.isUnstyled || this.$theme === 'none') return;\n\n            // common\n            if (!Theme.isStyleNameLoaded('common')) {\n                const { primitive, semantic, global, style } = this.$style?.getCommonTheme?.() || {};\n\n                BaseStyle.load(primitive?.css, { name: 'primitive-variables', ...this.$styleOptions });\n                BaseStyle.load(semantic?.css, { name: 'semantic-variables', ...this.$styleOptions });\n                BaseStyle.load(global?.css, { name: 'global-variables', ...this.$styleOptions });\n                BaseStyle.loadTheme({ name: 'global-style', ...this.$styleOptions }, style);\n\n                Theme.setLoadedStyleName('common');\n            }\n\n            // component\n            if (!Theme.isStyleNameLoaded(this.$style?.name) && this.$style?.name) {\n                const { css, style } = this.$style?.getComponentTheme?.() || {};\n\n                this.$style?.load(css, { name: `${this.$style.name}-variables`, ...this.$styleOptions });\n                this.$style?.loadTheme({ name: `${this.$style.name}-style`, ...this.$styleOptions }, style);\n\n                Theme.setLoadedStyleName(this.$style.name);\n            }\n\n            // layer order\n            if (!Theme.isStyleNameLoaded('layer-order')) {\n                const layerOrder = this.$style?.getLayerOrderThemeCSS?.();\n\n                BaseStyle.load(layerOrder, { name: 'layer-order', first: true, ...this.$styleOptions });\n\n                Theme.setLoadedStyleName('layer-order');\n            }\n        },\n        _loadScopedThemeStyles(preset) {\n            const { css } = this.$style?.getPresetTheme?.(preset, `[${this.$attrSelector}]`) || {};\n            const scopedStyle = this.$style?.load(css, { name: `${this.$attrSelector}-${this.$style.name}`, ...this.$styleOptions });\n\n            this.scopedStyleEl = scopedStyle.el;\n        },\n        _unloadScopedThemeStyles() {\n            this.scopedStyleEl?.value?.remove();\n        },\n        _themeChangeListener(callback = () => {}) {\n            Base.clearLoadedStyleNames();\n            ThemeService.on('theme:change', callback);\n        },\n        _getHostInstance(instance) {\n            return instance ? (this.$options.hostName ? (instance.$.type.name === this.$options.hostName ? instance : this._getHostInstance(instance.$parentInstance)) : instance.$parentInstance) : undefined;\n        },\n        _getPropValue(name) {\n            return this[name] || this._getHostInstance(this)?.[name];\n        },\n        _getOptionValue(options, key = '', params = {}) {\n            return getKeyValue(options, key, params);\n        },\n        _getPTValue(obj = {}, key = '', params = {}, searchInDefaultPT = true) {\n            const searchOut = /./g.test(key) && !!params[key.split('.')[0]];\n            const { mergeSections = true, mergeProps: useMergeProps = false } = this._getPropValue('ptOptions') || this.$primevueConfig?.ptOptions || {};\n            const global = searchInDefaultPT ? (searchOut ? this._useGlobalPT(this._getPTClassValue, key, params) : this._useDefaultPT(this._getPTClassValue, key, params)) : undefined;\n            const self = searchOut ? undefined : this._getPTSelf(obj, this._getPTClassValue, key, { ...params, global: global || {} });\n            const datasets = this._getPTDatasets(key);\n\n            return mergeSections || (!mergeSections && self) ? (useMergeProps ? this._mergeProps(useMergeProps, global, self, datasets) : { ...global, ...self, ...datasets }) : { ...self, ...datasets };\n        },\n        _getPTSelf(obj = {}, ...args) {\n            return mergeProps(\n                this._usePT(this._getPT(obj, this.$name), ...args), // Exp; <component :pt=\"{}\"\n                this._usePT(this.$_attrsPT, ...args) // Exp; <component :pt:[passthrough_key]:[attribute]=\"{value}\" or <component :pt:[passthrough_key]=\"() =>{value}\"\n            );\n        },\n        _getPTDatasets(key = '') {\n            const datasetPrefix = 'data-pc-';\n            const isExtended = key === 'root' && isNotEmpty(this.pt?.['data-pc-section']);\n\n            return (\n                key !== 'transition' && {\n                    ...(key === 'root' && {\n                        [`${datasetPrefix}name`]: toFlatCase(isExtended ? this.pt?.['data-pc-section'] : this.$.type.name),\n                        ...(isExtended && { [`${datasetPrefix}extend`]: toFlatCase(this.$.type.name) }),\n                        ...(isClient() && { [`${this.$attrSelector}`]: '' })\n                    }),\n                    [`${datasetPrefix}section`]: toFlatCase(key)\n                }\n            );\n        },\n        _getPTClassValue(...args) {\n            const value = this._getOptionValue(...args);\n\n            return isString(value) || isArray(value) ? { class: value } : value;\n        },\n        _getPT(pt, key = '', callback) {\n            const getValue = (value, checkSameKey = false) => {\n                const computedValue = callback ? callback(value) : value;\n                const _key = toFlatCase(key);\n                const _cKey = toFlatCase(this.$name);\n\n                return (checkSameKey ? (_key !== _cKey ? computedValue?.[_key] : undefined) : computedValue?.[_key]) ?? computedValue;\n            };\n\n            return pt?.hasOwnProperty('_usept')\n                ? {\n                      _usept: pt['_usept'],\n                      originalValue: getValue(pt.originalValue),\n                      value: getValue(pt.value)\n                  }\n                : getValue(pt, true);\n        },\n        _usePT(pt, callback, key, params) {\n            const fn = (value) => callback(value, key, params);\n\n            if (pt?.hasOwnProperty('_usept')) {\n                const { mergeSections = true, mergeProps: useMergeProps = false } = pt['_usept'] || this.$primevueConfig?.ptOptions || {};\n                const originalValue = fn(pt.originalValue);\n                const value = fn(pt.value);\n\n                if (originalValue === undefined && value === undefined) return undefined;\n                else if (isString(value)) return value;\n                else if (isString(originalValue)) return originalValue;\n\n                return mergeSections || (!mergeSections && value) ? (useMergeProps ? this._mergeProps(useMergeProps, originalValue, value) : { ...originalValue, ...value }) : value;\n            }\n\n            return fn(pt);\n        },\n        _useGlobalPT(callback, key, params) {\n            return this._usePT(this.globalPT, callback, key, params);\n        },\n        _useDefaultPT(callback, key, params) {\n            return this._usePT(this.defaultPT, callback, key, params);\n        },\n        ptm(key = '', params = {}) {\n            return this._getPTValue(this.pt, key, { ...this.$params, ...params });\n        },\n        ptmi(key = '', params = {}) {\n            // inheritAttrs:true\n            return mergeProps(this.$_attrsWithoutPT, this.ptm(key, params));\n        },\n        ptmo(obj = {}, key = '', params = {}) {\n            return this._getPTValue(obj, key, { instance: this, ...params }, false);\n        },\n        cx(key = '', params = {}) {\n            return !this.isUnstyled ? this._getOptionValue(this.$style.classes, key, { ...this.$params, ...params }) : undefined;\n        },\n        sx(key = '', when = true, params = {}) {\n            if (when) {\n                const self = this._getOptionValue(this.$style.inlineStyles, key, { ...this.$params, ...params });\n                const base = this._getOptionValue(BaseComponentStyle.inlineStyles, key, { ...this.$params, ...params });\n\n                return [base, self];\n            }\n\n            return undefined;\n        }\n    },\n    computed: {\n        globalPT() {\n            return this._getPT(this.$primevueConfig?.pt, undefined, (value) => resolve(value, { instance: this }));\n        },\n        defaultPT() {\n            return this._getPT(this.$primevueConfig?.pt, undefined, (value) => this._getOptionValue(value, this.$name, { ...this.$params }) || resolve(value, { ...this.$params }));\n        },\n        isUnstyled() {\n            return this.unstyled !== undefined ? this.unstyled : this.$primevueConfig?.unstyled;\n        },\n        $inProps() {\n            const nodePropKeys = Object.keys(this.$.vnode?.props || {});\n\n            return Object.fromEntries(Object.entries(this.$props).filter(([k]) => nodePropKeys?.includes(k)));\n        },\n        $theme() {\n            return this.$primevueConfig?.theme;\n        },\n        $style() {\n            return { classes: undefined, inlineStyles: undefined, load: () => {}, loadCSS: () => {}, loadTheme: () => {}, ...(this._getHostInstance(this) || {}).$style, ...this.$options.style };\n        },\n        $styleOptions() {\n            return { nonce: this.$primevueConfig?.csp?.nonce };\n        },\n        $primevueConfig() {\n            return this.$primevue?.config;\n        },\n        $name() {\n            return this.$options.hostName || this.$.type.name;\n        },\n        $params() {\n            const parentInstance = this._getHostInstance(this) || this.$parent;\n\n            return {\n                instance: this,\n                props: this.$props,\n                state: this.$data,\n                attrs: this.$attrs,\n                parent: {\n                    instance: parentInstance,\n                    props: parentInstance?.$props,\n                    state: parentInstance?.$data,\n                    attrs: parentInstance?.$attrs\n                }\n            };\n        },\n        $_attrsPT() {\n            return Object.entries(this.$attrs || {})\n                .filter(([key]) => key?.startsWith('pt:'))\n                .reduce((result, [key, value]) => {\n                    const [, ...rest] = key.split(':');\n\n                    rest?.reduce((currentObj, nestedKey, index, array) => {\n                        !currentObj[nestedKey] && (currentObj[nestedKey] = index === array.length - 1 ? value : {});\n\n                        return currentObj[nestedKey];\n                    }, result);\n\n                    return result;\n                }, {});\n        },\n        $_attrsWithoutPT() {\n            return Object.entries(this.$attrs || {})\n                .filter(([key]) => !key?.startsWith('pt:'))\n                .reduce((acc, [key, value]) => {\n                    acc[key] = value;\n\n                    return acc;\n                }, {});\n        }\n    }\n};\n</script>\n"],"names":["BaseStyle","extend","name","props","pt","type","Object","undefined","ptOptions","unstyled","Boolean","dt","inject","$parentInstance","watch","isUnstyled","immediate","handler","newValue","_loadCoreStyles","_themeChangeListener","_this","_loadScopedThemeStyles","_unloadScopedThemeStyles","scopedStyleEl","rootEl","$attrSelector","beforeCreate","_this$pt","_this$pt2","_this$pt3","_ref","_ref$onBeforeCreate","_this$$primevueConfig","_this$$primevue","_this$$primevue2","_this$$primevue3","_ref2","_ref2$onBeforeCreate","_usept","originalValue","$","value","hooks","call","_useptInConfig","$primevueConfig","originalValueInConfig","$primevue","config","valueInConfig","uuid","created","_hook","beforeMount","findSingle","$el","concat","toFlatCase","hasAttribute","setAttribute","$pc","_objectSpread","attrSelector","$params","_loadStyles","mounted","beforeUpdate","updated","beforeUnmount","unmounted","methods","hookName","$options","hostName","selfHook","_usePT","_getPT","_getOptionValue","defaultHook","_useDefaultPT","_mergeProps","fn","_len","arguments","length","args","Array","_key2","isFunction","apply","mergeProps","_this2","_load","Base","isStyleNameLoaded","loadCSS","$styleOptions","_loadGlobalStyles","setLoadedStyleName","_loadThemeStyles","_this$$style","_this$$style2","$style","BaseComponentStyle","style","globalCSS","_useGlobalPT","isNotEmpty","load","_this$$style4","_this$$style5","$theme","Theme","_this$$style3","_this$$style3$getComm","_ref3","getCommonTheme","primitive","semantic","global","css","loadTheme","_this$$style6","_this$$style6$getComp","_this$$style7","_this$$style8","_ref4","getComponentTheme","_this$$style9","_this$$style9$getLaye","layerOrder","getLayerOrderThemeCSS","first","preset","_this$$style10","_this$$style10$getPre","_this$$style11","_ref5","getPresetTheme","scopedStyle","el","_this$scopedStyleEl","remove","callback","clearLoadedStyleNames","ThemeService","on","_getHostInstance","instance","_getPropValue","_this$_getHostInstanc","options","key","params","getKeyValue","_getPTValue","_this$$primevueConfig2","obj","searchInDefaultPT","searchOut","test","split","_ref6","_ref6$mergeSections","mergeSections","_ref6$mergeProps","useMergeProps","_getPTClassValue","self","_getPTSelf","datasets","_getPTDatasets","_len2","_key3","$name","$_attrsPT","_this$pt4","_this$pt5","datasetPrefix","isExtended","_defineProperty","isClient","isString","isArray","_this3","getValue","_ref9","checkSameKey","computedValue","_key","_cKey","hasOwnProperty","_this$$primevueConfig3","_ref10","_ref10$mergeSections","_ref10$mergeProps","globalPT","defaultPT","ptm","ptmi","$_attrsWithoutPT","ptmo","cx","classes","sx","when","inlineStyles","base","computed","_this$$primevueConfig4","_this4","resolve","_this$$primevueConfig5","_this5","_this$$primevueConfig6","$inProps","_this$$$vnode","nodePropKeys","keys","vnode","fromEntries","entries","$props","filter","_ref11","_ref12","_slicedToArray","k","includes","_this$$primevueConfig7","theme","_this$$primevueConfig8","nonce","csp","_this$$primevue4","parentInstance","$parent","state","$data","attrs","$attrs","parent","_ref13","_ref14","startsWith","reduce","result","_ref15","_ref16","_key$split","_key$split2","_toArray","rest","slice","currentObj","nestedKey","index","array","_ref17","_ref18","acc","_ref19","_ref20"],"mappings":"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"}